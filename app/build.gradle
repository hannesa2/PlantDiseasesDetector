apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def keystorePropertiesFile = rootProject.file("signing/keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace 'isomora.com.greendoctor'
    defaultConfig {
        applicationId "isomora.com.greendoctor"
        minSdkVersion 26
        compileSdk 34
        targetSdkVersion 34
        versionCode 1
        versionName "1.1"

        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
    }
    androidResources {
        noCompress += "tflite"
    }
    signingConfigs {
        debugCI {
            storeFile file('../signing/debug.keystore')
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
        release {
            storeFile file('../signing/release.keystore')
            storePassword keystoreProperties.getProperty('storePassword')
            keyAlias keystoreProperties.getProperty('keyAlias')
            keyPassword keystoreProperties.getProperty('keyPassword')
        }
    }
    buildTypes {
        debug {
            if (System.getenv("CI") == "true") { // Github action
                println "I run on Gitlab and use for debug the RELEASE signing"
                signingConfig signingConfigs.release
            }
        }
        release {
            signingConfig signingConfigs.release
            if (System.getenv("CI_SERVER")) { // gitlab
                println "I run on Gitlab and use RELEASE signing"
                signingConfig signingConfigs.release
            } else if (System.getenv("CI") == "true") { // Github
                println "I run on Github and use RELEASE signing"
                signingConfig signingConfigs.release
            } else if (file('../signing/release-key.keystore').exists()) {
                if (System.getenv("KEYSTORE_PASS") == null || System.getenv("ALIAS_PASS") == null) {
                    println "I run somewhere else and I use DEBUG signing because variables are not set !"
                    signingConfig signingConfigs.debugCI
                } else {
                    println "I use RELEASE signing"
                    signingConfig signingConfigs.release
                }
            } else {
                println "I run somewhere else and I use debug signing"
                signingConfig signingConfigs.debugCI
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'org.tensorflow:tensorflow-lite:2.17.0'
    implementation 'com.github.hannesa2:githubAppUpdate:2.3.1'
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
